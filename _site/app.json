[{"name":"app.R","content":"library(shiny)\r\n\r\n# Define UI for app that draws a histogram ----\r\nui <- fluidPage(\r\n\r\n  # App title ----\r\n  titlePanel(\"Hello Shiny!\"),\r\n\r\n  # Sidebar layout with input and output definitions ----\r\n  sidebarLayout(\r\n\r\n    # Sidebar panel for inputs ----\r\n    sidebarPanel(\r\n\r\n      # Input: Slider for the number of bins ----\r\n      sliderInput(inputId = \"bins\",\r\n                  label = \"Number of bins:\",\r\n                  min = 1,\r\n                  max = 40,\r\n                  value = 30)\r\n\r\n    ),\r\n\r\n    # Main panel for displaying outputs ----\r\n    mainPanel(\r\n\r\n      # Output: Histogram ----\r\n      plotOutput(outputId = \"distPlot\")\r\n\r\n    )\r\n  )\r\n)\r\n\r\n# Define server logic required to draw a histogram ----\r\nserver <- function(input, output) {\r\n\r\n  # Histogram of the Old Faithful Geyser Data ----\r\n  # with requested number of bins\r\n  # This expression that generates a histogram is wrapped in a call\r\n  # to renderPlot to indicate that:\r\n  #\r\n  # 1. It is \"reactive\" and therefore should be automatically\r\n  #    re-executed when inputs (input$bins) change\r\n  # 2. Its output type is a plot\r\n  output$distPlot <- renderPlot({\r\n\r\n    x    <- faithful$waiting\r\n    bins <- seq(min(x), max(x), length.out = input$bins + 1)\r\n\r\n    hist(x, breaks = bins, col = \"darkred\", border = \"white\",\r\n         xlab = \"Waiting time to next eruption (in mins)\",\r\n         main = \"Histogram of waiting times\")\r\n\r\n    })\r\n\r\n}\r\n\r\n# Create Shiny app ----\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"README.md","content":"# shiny_test2","type":"text"},{"name":"shiny_test2.Rproj","content":"Version: 1.0\r\n\r\nRestoreWorkspace: Default\r\nSaveWorkspace: Default\r\nAlwaysSaveHistory: Default\r\n\r\nEnableCodeIndexing: Yes\r\nUseSpacesForTab: Yes\r\nNumSpacesForTab: 2\r\nEncoding: UTF-8\r\n\r\nRnwWeave: Sweave\r\nLaTeX: pdfLaTeX\r\n","type":"text"}]
